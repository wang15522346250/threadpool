package com.alipay.demo.demo;

public class Lock {
    /**
     * 自旋锁是采用让当前线程不停地的在循环体内执行实现的，
     * 当循环的条件被其他线程改变时 才能进入临界区。
     * 临界区：每个进程中访问临界资源的那段java代码称为临界区
     * 临界资源是一次仅允许一个进程使用的共享资源
     * 由于自旋锁只是将当前线程不停地执行循环体，不进行线程状态的改变，所以响应速度更快。
     * 但当线程数不停增加时，性能下降明显，因为每个线程都需要执行，占用CPU时间。
     * 如果线程竞争不激烈，并且保持锁的时间段。适合使用自旋锁。
     *
     *
     * CAS 乐观锁
     * Unsafe类  中的本地方法Native 修饰的compareAndSwapInt  c++写的
     */


}
